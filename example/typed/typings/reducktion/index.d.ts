declare module 'reducktion' {
  interface RootState<StatePart> {
    [statePart: string]: StatePart;
  }

  // Provide action keys for auto-complete but allow custom types
  // that are eg. auto-generated by fetchableAction
  type ActionTypes<Actions> = { [K in keyof Actions]: string } & {
    [x: string]: string;
  };

  interface ActionCreator<Payload = any> {
    type: string;
    payload: Payload;
    [x: string]: any; // Allow additional meta fields
  }

  type ActionFunc<Payload = any> = (
    payload?: Payload
  ) => ActionCreator<Payload>;

  type Selector<State> = (state: RootState<State>, ...args: any[]) => any;

  type Thunk<Deps> = (
    arg: any,
    deps: Deps
  ) => (dispatch: any, getState: () => any, ...args: any[]) => Promise<void>;

  type Reducer<State, Payload = any> = (
    state: State,
    action: ActionCreator<Payload>
  ) => State;

  interface FetchableReducers<State> {
    loading: Reducer<State>;
    success: Reducer<State>;
    failure: Reducer<State>;
  }

  interface Dependencies {
    [depName: string]: Model<any, any>;
  }

  interface Thunks<Deps> {
    [thunkName: string]: Thunk<Deps>;
  }

  // TODO:
  // Figure out how to show proper error
  // if given action is not in keyof Actions
  interface ModelDefinition<State, Actions, Deps> {
    name: string;
    inject?: string[];
    state: State;
    actions: (
      { initialState }: { initialState: State }
    ) => {
      // Only include those keys that are present in the action's interface
      [K in keyof Actions]: Reducer<State> | FetchableReducers<State>
    };
    reactions?: (
      { initialState, deps }: { initialState: State; deps: Deps }
    ) => {
      [depType: string]: Reducer<State>;
    };
    selectors?: (
      { name }: { name: string }
    ) => {
      [selectorName: string]: Selector<State>;
    };
    sagas?: (
      { types, deps }: { types: ActionTypes<Actions>; deps: Deps }
    ) => any[];
    thunks?: Thunks<Deps>;
  }

  interface Model<State, Actions> {
    name: string;
    initialState: State;
    types: ActionTypes<Actions>;
    actions: Actions;
    selectors: {
      get: <K extends keyof State>(
        stateField: K
      ) => (state: RootState<State>, ...args: any[]) => Pick<State, K>[K];
    };
    getSagas: () => [];
    getReducer: () => Reducer<any>;
  }

  interface Fetchable {
    value: <T>(val: T) => FetchableValue<T>;
    action: <State, K extends keyof State>(
      // Only allow state fields for fetchable values
      stateField: FetchableValue extends State[K] ? K : never,
      customReducers?: Partial<FetchableReducers<State>>
    ) => FetchableReducers<State>;
  }

  // EXPORTS ********************************************************************

  export enum FetchableStatus {
    INITIAL,
    LOADING,
    SUCCESS,
    FAILURE,
  }

  export interface FetchableValue<Data = any> {
    data: Data;
    error: any;
    status: FetchableStatus;
  }

  export interface FetchableAction<SuccessData> extends ActionFunc {
    init: ActionFunc;
    fail: ActionFunc;
    success: ActionFunc<SuccessData>;
  }

  export const fetchable: Fetchable;

  export function createModel<State, Actions, Deps = Dependencies>(
    df: ModelDefinition<State, Actions, Deps>
  ): Model<State, Actions>;

  export function initModels(
    models: Model<any, any>[]
  ): {
    allReducers: {
      [x: string]: Reducer<any>;
    };
    allSagas: any[];
  } & {
    [modelName: string]: Model<any, any>;
  };
}
